# build, test and release push-to-cloud
name: Release
on:
  workflow_dispatch:
    inputs:
      ref:
        description: branch, tag or SHA to checkout.
        required: false
        default: 'master'
      version:
        description: semantic version to release.
        required: true
      release_note:
        description: release note file path.
        required: false
        default: ''
      draft:
        description: review before publishing?
        required: false
        default: true
env:
  RELEASE_NAME: push-to-cloud-service-${{ github.event.inputs.version }}
jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: prepare sources
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: setup Clojure
        uses: DeLaGuardo/setup-clojure@2.0
        with:
          tools-deps: '1.10.1.469'

      # Get secret from vault
      # Lifted from https://github.com/broadinstitute/gotc-deploy/'s actions
      - name: Authenticate to Gcloud
        id: gcloud
        env:
          ROLE_ID: ${{ secrets.ROLE_ID }}
          SECRET_ID: ${{ secrets.SECRET_ID }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        run: |
          # get vault token using role-id and secret-id
          VAULT_TOKEN=$(curl \
              --request POST \
              --data "{\"role_id\":\"${ROLE_ID}\",\"secret_id\":\"${SECRET_ID}\"}" \
              ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
          if [ -z "${VAULT_TOKEN}" ] ; then
             echo "Vault authentication failed!"
             exit 1
          fi
          echo ::add-mask::${VAULT_TOKEN}
          echo "VAULT_TOKEN=${VAULT_TOKEN}" >> $GITHUB_ENV
          # use vault token to read secret - service account json
          curl --silent -H "X-Vault-Token: ${VAULT_TOKEN}" -X GET \
               ${VAULT_ADDR}/v1/secret/dsde/gotc/dev/service-accounts/push-to-cloud-non-prod-service-account.json \
               | jq .data > sa.json
          if [ ! -s sa.json ] ; then
             echo "Retrieval of Gcloud SA credentials failed"
             exit 1
          fi
          # auth as service account
          gcloud auth activate-service-account --key-file=sa.json
          if [ $? -ne 0 ] ; then
             echo "Gcloud auth failed!"
             exit 1
          fi


      - name: lint
        run: clojure -A:lint

      - name: build
        run: clojure -A:build

      - name: unit test
        run: clojure -A:test unit

      - name: integration test
        run: clojure -A:test integration

      - name: package
        env:
          VERSION: ${{ github.event.inputs.version }}
          NOTE: ${{ github.event.input.release_note }}
        run: contrib/package.sh

      - name: create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: ${{ env.RELEASE_NAME }}
          commitish: ${{ github.event.inputs.ref }}
          body_path: ${{ github.event.inputs.release_note }}
          draft: ${{ github.event.inputs.draft }}

      - name: upload artifacts
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: derived/${{ env.RELEASE_NAME }}.tar.gz
          asset_name: ${{ env.RELEASE_NAME }}.tar.gz
          asset_content_type: application/gzip
